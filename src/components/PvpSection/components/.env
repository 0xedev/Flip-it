




import React, { useState, useEffect } from "react";
import { gql, useQuery } from "@apollo/client";

// GraphQL query to fetch all joined games
const GET_ALL_GAMES = gql`
  query GetAllGames {
    gameJoineds {
      gameId
      player1
      player2
      betAmount
      tokenAddress
      blockNumber
      blockTimestamp
      transactionHash
    }
  }
`;

// GraphQL query to fetch rewards claimed for a specific player
const GET_REWARD_CLAIMED = gql`
  query GetRewardClaimed($userWallet: String!, $gameId: BigInt!) {
    rewardClaimeds(where: { player: $userWallet, gameId: $gameId }) {
      gameId
      player
      amount
    }
  }
`;

// GraphQL query to fetch resolved games for the user
const GET_GAME_RESOLVED = gql`
  query GetGameResolved($userWallet: String!) {
    gameResolveds(where: { winner: $userWallet }) {
      gameId
      winner
      payout
      blockNumber
      blockTimestamp
      transactionHash
    }
  }
`;

const MyGames: React.FC = () => {
  const [userWallet, setUserWallet] = useState<string>("");
  const { loading: gamesLoading, error: gamesError, data: gamesData } = useQuery(GET_ALL_GAMES);
  const { loading: resolvedLoading, error: resolvedError, data: resolvedData } = useQuery(GET_GAME_RESOLVED, {
    variables: { userWallet },
    skip: !userWallet, // Only run the query if userWallet is set
  });
  const [rewardsData, setRewardsData] = useState<any>({});

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setUserWallet(event.target.value);
  };

  useEffect(() => {
    if (gamesData && userWallet) {
      console.log("Game Data:", gamesData);
    }
  }, [gamesData, userWallet]);

  if (gamesLoading || resolvedLoading) return <p>Loading...</p>;
  if (gamesError) return <p>Error loading games: {gamesError.message}</p>;
  if (resolvedError) return <p>Error loading resolved games: {resolvedError.message}</p>;

  const userGames = gamesData?.gameJoineds?.filter(
    (game: any) => game.player1 === userWallet || game.player2 === userWallet
  );

  const userResolvedGames = resolvedData?.gameResolveds || [];

  const fetchRewards = async (gameId: string) => {
    try {
      const { data: rewardData } = await client.query({
        query: GET_REWARD_CLAIMED,
        variables: { userWallet, gameId },
      });
      return rewardData?.rewardClaimeds || [];
    } catch (err) {
      console.error("Error fetching reward data:", err);
      return [];
    }
  };

  const displayRewards = async (gameId: string) => {
    const rewards = await fetchRewards(gameId);
    setRewardsData((prevData) => ({
      ...prevData,
      [gameId]: rewards,
    }));
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Enter Wallet Address"
        value={userWallet}
        onChange={handleInputChange}
      />
      {userWallet && (
        <div className="text-black">
          <h2>Joined Games for {userWallet}</h2>
          {userGames && userGames.length > 0 ? (
            userGames.map((game: any) => (
              <div key={game.gameId}>
                <h3>Game ID: {game.gameId}</h3>
                <p>Bet Amount: {game.betAmount}</p>
               <p>{game.player1}</p>
               <p>{game.player2}</p>
                <button onClick={() => displayRewards(game.gameId)}>
                  View Reward Info
                </button>

                {/* Display rewards data for this game */}
                {rewardsData[game.gameId] && rewardsData[game.gameId].length > 0 ? (
                  rewardsData[game.gameId].map((reward: any) => (
                    <div key={reward.gameId}>
                      <p>Reward Amount: {reward.amount}</p>
                    </div>
                  ))
                ) : (
                  <p>No reward claimed for this game.</p>
                )}
                <hr />
              </div>
            ))
          ) : (
            <p>No games found for this wallet.</p>
          )}

          <h2>Resolved Games for {userWallet}</h2>
          {userResolvedGames && userResolvedGames.length > 0 ? (
            userResolvedGames.map((game: any) => {
              // Check if the current player is the winner or loser
              const isWinner = game.winner === userWallet;
              const isPlayer1 = game.player1 === userWallet;
              const isPlayer2 = game.player2 === userWallet;

              let status = "";
              if (isWinner) {
                status = "Winner";
              } else if (isPlayer1 || isPlayer2) {
                status = "Loser";
              } else {
                status = "Game still unresolved";
              }

              return (
                <div key={game.gameId}>
                  <h3>Game ID: {game.gameId}</h3>
                  <p>Status: {status}</p>
                  <p>Payout: {game.payout}</p>
                  <hr />
                </div>
              );
            })
          ) : (
            <p>No resolved games found for this wallet.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default MyGames;
