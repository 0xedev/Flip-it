import React, { useState, useEffect } from "react";
import {
  useWriteContract,
  useWaitForTransactionReceipt,
  useReadContract,
  useAccount,
  useConnect,
  useWatchContractEvent,
  useDisconnect
} from "wagmi";
import { parseEther, formatEther } from "viem";
import { Connector } from "@wagmi/core";
import Navbar from "./PvpSection/Navbar";
import WalletModal from "./PvpSection/WalletModel";

import { SUPPORTED_TOKENS, ADDRESS, ABI } from "./PvpSection/Contract";

type PendingBet = {
  betId: number;
  player: string;
  token: string;
  amount: bigint;
  face: boolean;
  timestamp: bigint;
};

type GameMatch = {
  requestId: string;
  paid: bigint;
  fulfilled: boolean;
  player1: string;
  player2: string;
  player1Face: boolean;
  outcome: boolean;
  winner: string;
  token: string;
  amount: bigint;
};

const Pvp: React.FC = () => {
  // Wallet Connection States
  const { connect, connectors } = useConnect();
  const { disconnect } = useDisconnect();
  const { isConnected, address } = useAccount();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedConnector, setSelectedConnector] = useState<Connector | null>(null);

  // Game States
  const [selectedToken, setSelectedToken] = useState<string>(SUPPORTED_TOKENS[0]?.address || "");
  const [betAmount, setBetAmount] = useState<string>("0.01");
  const [selectedFace, setSelectedFace] = useState<boolean>(false); // false = heads, true = tails
  const [pendingBets, setPendingBets] = useState<PendingBet[]>([]);
  const [myGames, setMyGames] = useState<GameMatch[]>([]);
  const [activeTab, setActiveTab] = useState<"create" | "join" | "my-games">("create");
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [pendingTxHash, setPendingTxHash] = useState<string | null>(null);
  const [gameRequests, setGameRequests] = useState<string[]>([]);

  // Contract Interactions
  const { data: writeData, isPending, writeContract } = useWriteContract();
  const { data: txData, isSuccess: isTxSuccess, isError: isTxError } = 
    useWaitForTransactionReceipt({
      hash: writeData,
    });

  // Fetch pending bets
  const { data: pendingBetsData, refetch: refetchPendingBets } = useReadContract({
    address: ADDRESS,
    abi: ABI,
    functionName: "getPendingBets",
    enabled: isConnected,
  });

  // Handle allowance check
  const { data: allowanceData, refetch: refetchAllowance } = useReadContract({
    address: selectedToken,
    abi: [
      {
        inputs: [
          { name: "owner", type: "address" },
          { name: "spender", type: "address" }
        ],
        name: "allowance",
        outputs: [{ name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function"
      }
    ],
    functionName: "allowance",
    args: [address || "0x0", ADDRESS],
    enabled: isConnected && !!address && !!selectedToken,
  });

  // Watch for events
  useWatchContractEvent({
    address: ADDRESS,
    abi: ABI,
    eventName: "BetPlaced",
    onLogs(logs) {
      console.log("BetPlaced event triggered:", logs);
      refetchPendingBets();
      setSuccess("Bet placed successfully!");
      setTimeout(() => setSuccess(null), 5000);
    },
  });

  useWatchContractEvent({
    address: ADDRESS,
    abi: ABI,
    eventName: "MatchCreated",
    onLogs(logs) {
      console.log("MatchCreated event triggered:", logs);
      refetchPendingBets();
      // Extract requestId from logs to track games
      if (logs[0] && logs[0].args) {
        const requestId = logs[0].args.requestId?.toString();
        if (requestId) {
          setGameRequests(prev => [...prev, requestId]);
        }
      }
      setSuccess("Successfully joined the game!");
      setTimeout(() => setSuccess(null), 5000);
    },
  });

  useWatchContractEvent({
    address: ADDRESS,
    abi: ABI,
    eventName: "BetCanceled",
    onLogs(logs) {
      console.log("BetCanceled event triggered:", logs);
      refetchPendingBets();
      setSuccess("Bet successfully canceled!");
      setTimeout(() => setSuccess(null), 5000);
    },
  });

  useWatchContractEvent({
    address: ADDRESS,
    abi: ABI,
    eventName: "MatchFulfilled",
    onLogs(logs) {
      console.log("MatchFulfilled event triggered:", logs);
      fetchMyGames();
      setSuccess("Game completed! Check results!");
      setTimeout(() => setSuccess(null), 5000);
    },
  });

  // Fetch pending bets on component mount and when connection changes
  useEffect(() => {
    if (isConnected) {
      console.log("Fetching pending bets...");
      refetchPendingBets();
      fetchMyGames();
    }
  }, [isConnected, address]);

  // Process pending bets data
  useEffect(() => {
    if (pendingBetsData) {
      const formattedBets = (pendingBetsData as any[]).map((bet, index) => ({
        betId: index + 1, // Assuming bet IDs are sequential
        player: bet.player,
        token: bet.token,
        amount: bet.amount,
        face: bet.face,
        timestamp: bet.timestamp
      }));
      setPendingBets(formattedBets);
      console.log("Processed pending bets:", formattedBets);
    }
  }, [pendingBetsData]);

  // Handle transaction results
  useEffect(() => {
    if (isTxSuccess) {
      console.log("Transaction success:", writeData);
      setLoading(false);
      setPendingTxHash(null);
    }
    if (isTxError) {
      console.error("Transaction failed:", writeData);
      setLoading(false);
      setError("Transaction failed. Please try again.");
      setPendingTxHash(null);
      setTimeout(() => setError(null), 5000);
    }
  }, [isTxSuccess, isTxError]);
  

  // Set pending transaction
  useEffect(() => {
    if (writeData) {
      console.log("Pending transaction hash:", writeData);
      setPendingTxHash(writeData);
    }
  }, [writeData]);

  // Connector handlers
  const handleConnectorSelect = (connector: Connector) => {
    console.log("Selected connector:", connector);
    setSelectedConnector(connector);
  };

  const handleConnect = async () => {
    if (!selectedConnector) return;
    try {
      await connect({ connector: selectedConnector });
      handleCloseModal();
      console.log("Successfully connected with connector:", selectedConnector);
    } catch (err) {
      console.error("Connection failed", err);
      setError("Connection failed. Please try again.");
      setTimeout(() => setError(null), 5000);
    }
  };

  const handleDisconnect = () => {
    disconnect();
    console.log("Disconnected from wallet.");
  };

  const handleOpenModal = () => {
    console.log("Opening wallet modal...");
    setIsModalOpen(true);
  };
  const handleCloseModal = () => {
    console.log("Closing wallet modal...");
    setIsModalOpen(false);
  };

  // Game functions
  const handleCreateGame = async () => {
    if (!isConnected || !address) {
      handleOpenModal();
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // Check if we need to approve tokens first
      const amount = parseEther(betAmount);
      console.log("Creating game with bet amount:", betAmount, "token:", selectedToken);
      if (allowanceData < amount) {
        await approveTokens(amount);
      }

      writeContract({
        address: ADDRESS,
        abi: ABI,
        functionName: "createGame",
        args: [selectedFace, selectedToken, amount],
      });
    } catch (err) {
      console.error("Error creating game:", err);
      setLoading(false);
      setError("Failed to create game. Please try again.");
      setTimeout(() => setError(null), 5000);
    }
  };

  const handleJoinGame = async (betId: number) => {
    if (!isConnected || !address) {
      handleOpenModal();
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // Find the bet to get the token and amount
      const bet = pendingBets.find(b => b.betId === betId);
      if (!bet) {
        throw new Error("Bet not found");
      }

      console.log("Joining game for bet ID:", betId, "Amount:", bet.amount);

      // Check if we need to approve tokens first
      if (allowanceData < bet.amount) {
        await approveTokens(bet.amount);
      }

      writeContract({
        address: ADDRESS,
        abi: ABI,
        functionName: "joinGame",
        args: [betId],
      });
    } catch (err) {
      console.error("Error joining game:", err);
      setLoading(false);
      setError("Failed to join game. Please try again.");
      setTimeout(() => setError(null), 5000);
    }
  };

  const handleCancelBet = async (betId: number) => {
    if (!isConnected || !address) {
      handleOpenModal();
      return;
    }

    try {
      setLoading(true);
      setError(null);

      console.log("Canceling bet with ID:", betId);

      writeContract({
        address: ADDRESS,
        abi: ABI,
        functionName: "cancelBet",
        args: [betId],
      });
    } catch (err) {
      console.error("Error canceling bet:", err);
      setLoading(false);
      setError("Failed to cancel bet. Please try again.");
      setTimeout(() => setError(null), 5000);
    }
  };

  const approveTokens = async (amount: bigint) => {
    console.log("Approving tokens for amount:", amount);

    writeContract({
      address: selectedToken,
      abi: [
        {
          inputs: [
            { name: "spender", type: "address" },
            { name: "amount", type: "uint256" }
          ],
          name: "approve",
          outputs: [{ name: "", type: "bool" }],
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      functionName: "approve",
      args: [ADDRESS, amount],
    });

    // Wait for approval to complete before proceeding
    return new Promise((resolve) => {
      const checkApproval = setInterval(() => {
        if (!isPending) {
          clearInterval(checkApproval);
          refetchAllowance();
          resolve(true);
        }
      }, 1000);
    });
  };

  const fetchMyGames = async () => {
    if (!isConnected || !address) return;

    // Fetch game details for each request ID
    const fetchedGames: GameMatch[] = [];
    
    for (const requestId of gameRequests) {
      try {
        const result = await readGameStatus(requestId);
        if (result) {
          fetchedGames.push({
            requestId,
            ...result
          });
        }
      } catch (err) {
        console.error(`Error fetching game ${requestId}:`, err);
      }
    }

    setMyGames(fetchedGames);
    console.log("Fetched my games:", fetchedGames);
  };

  const readGameStatus = async (requestId: string) => {
    if (!isConnected) return null;
    
    try {
      const result = await fetch();
      return {
        paid: result[0],
        fulfilled: result[1],
        player1: result[2],
        player2: result[3],
        player1Face: result[4],
        outcome: result[5],
        winner: result[6],
        token: result[7],
        amount: result[8]
      };
    } catch (err) {
      console.error("Error fetching game status:", err);
      return null;
    }
    
    // Helper function to fetch game status
    async function fetch() {
      return new Promise<any[]>((resolve, reject) => {
        const result = useReadContract({
          address: ADDRESS,
          abi: ABI,
          functionName: "getBetStatus",
          args: [requestId],
        });
        
        if (result.data) {
          resolve(result.data as any[]);
        } else if (result.error) {
          reject(result.error);
        } else {
          reject(new Error("Unknown error"));
        }
      });
    }
  };

  const getTokenSymbol = (address: string) => {
    const token = SUPPORTED_TOKENS.find(t => t.address.toLowerCase() === address.toLowerCase());
    return token?.symbol || "???";
  };

  const formatAddress = (addr: string) => {
    return `${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`;
  };

  const getTimeDiff = (timestamp: bigint) => {
    const now = BigInt(Math.floor(Date.now() / 1000));
    const diff = now - timestamp;
    
    if (diff < BigInt(60)) return `${diff.toString()} seconds ago`;
    if (diff < BigInt(3600)) return `${(diff / BigInt(60)).toString()} minutes ago`;
    if (diff < BigInt(86400)) return `${(diff / BigInt(3600)).toString()} hours ago`;
    return `${(diff / BigInt(86400)).toString()} days ago`;
  };

  // Check if a bet can be canceled (after timeout)
  const canCancelBet = (bet: PendingBet) => {
    if (bet.player.toLowerCase() !== address?.toLowerCase()) return false;
    
    const now = BigInt(Math.floor(Date.now() / 1000));
    const timeout = BigInt(3600); // 1 hour timeout from contract
    return now >= bet.timestamp + timeout;
  };

  return (
    <div className="flex flex-col min-h-screen bg-blue-100">
      {/* Navbar Component */}
      <Navbar
        handleOpenModal={handleOpenModal}
        isConnected={isConnected}
        address={address}
        handleDisconnect={handleDisconnect}
        selectedConnector={selectedConnector}
      />

      {/* Status Messages */}
      {error && (
        <div className="bg-red-500 text-white p-4 text-center">
          {error}
        </div>
      )}
      {success && (
        <div className="bg-green-500 text-white p-4 text-center">
          {success}
        </div>
      )}
      {loading && (
        <div className="bg-yellow-500 text-white p-4 text-center">
          Processing transaction...
          {pendingTxHash && (
            <span className="ml-2">
              Hash: {pendingTxHash.substring(0, 10)}...
            </span>
          )}
        </div>
      )}

      {/* Main Content */}
      <div className="flex-grow container mx-auto py-8 px-4">
        {!isConnected ? (
          <div className="text-center max-w-2xl mx-auto">
            <h2 className="text-3xl font-bold text-gray-800 mb-4">Getting Started with PVP Game</h2>
            <p className="text-lg text-gray-600 mb-6">
              Connect your wallet to begin playing! Experience the thrill of the PVP game by interacting with other players and winning rewards. Ready to start? Just connect your wallet and dive into the action!
</p>
            <button
              onClick={handleOpenModal}
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition duration-300"
            >
              Connect Wallet
            </button>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-lg p-6">
            {/* Game Tabs */}
            <div className="flex mb-6 border-b">
              <button
                className={`py-2 px-4 ${activeTab === "create" ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-500"}`}
                onClick={() => setActiveTab("create")}
              >
                Create Game
              </button>
              <button
                className={`py-2 px-4 ${activeTab === "join" ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-500"}`}
                onClick={() => setActiveTab("join")}
              >
                Join Game
              </button>
              <button
                className={`py-2 px-4 ${activeTab === "my-games" ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-500"}`}
                onClick={() => setActiveTab("my-games")}
              >
                My Games
              </button>
            </div>

            {/* Create Game Form */}
            {activeTab === "create" && (
              <div className="max-w-md mx-auto">
                <h3 className="text-xl font-bold mb-4">Create New Game</h3>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Select Token</label>
                  <select
                    className="w-full p-2 border rounded"
                    value={selectedToken}
                    onChange={(e) => setSelectedToken(e.target.value)}
                    disabled={loading}
                  >
                    {SUPPORTED_TOKENS.map((token) => (
                      <option key={token.address} value={token.address}>
                        {token.symbol}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Bet Amount</label>
                  <input
                    type="number"
                    className="w-full p-2 border rounded"
                    value={betAmount}
                    onChange={(e) => setBetAmount(e.target.value)}
                    step="0.001"
                    min="0.001"
                    disabled={loading}
                  />
                </div>
                
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2">Choose your side</label>
                  <div className="flex space-x-4">
                    <button
                      className={`py-2 px-4 rounded ${selectedFace === false ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                      onClick={() => setSelectedFace(false)}
                      disabled={loading}
                    >
                      Heads
                    </button>
                    <button
                      className={`py-2 px-4 rounded ${selectedFace === true ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                      onClick={() => setSelectedFace(true)}
                      disabled={loading}
                    >
                      Tails
                    </button>
                  </div>
                </div>
                
                <button
                  onClick={handleCreateGame}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow transition duration-300 disabled:opacity-50"
                  disabled={loading || !selectedToken || parseFloat(betAmount) <= 0}
                >
                  Create Game
                </button>
              </div>
            )}

            {/* Join Game Tab */}
            {activeTab === "join" && (
              <div>
                <h3 className="text-xl font-bold mb-4">Available Games</h3>
                
                {pendingBets.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <p>No games available to join right now.</p>
                    <p className="mt-2">Why not create one?</p>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-white">
                      <thead>
                        <tr>
                          <th className="py-3 px-4 border-b text-left">Player</th>
                          <th className="py-3 px-4 border-b text-left">Choice</th>
                          <th className="py-3 px-4 border-b text-left">Token</th>
                          <th className="py-3 px-4 border-b text-right">Amount</th>
                          <th className="py-3 px-4 border-b text-right">Created</th>
                          <th className="py-3 px-4 border-b text-center">Action</th>
                        </tr>
                      </thead>
                      <tbody>
                        {pendingBets.map((bet) => (
                          <tr key={bet.betId}>
                            <td className="py-3 px-4 border-b">{formatAddress(bet.player)}</td>
                            <td className="py-3 px-4 border-b">{bet.face ? "Tails" : "Heads"}</td>
                            <td className="py-3 px-4 border-b">{getTokenSymbol(bet.token)}</td>
                            <td className="py-3 px-4 border-b text-right">{formatEther(bet.amount)}</td>
                            <td className="py-3 px-4 border-b text-right">{getTimeDiff(bet.timestamp)}</td>
                            <td className="py-3 px-4 border-b text-center">
                              {bet.player.toLowerCase() === address?.toLowerCase() ? (
                                <button
                                  onClick={() => handleCancelBet(bet.betId)}
                                  className={`py-1 px-4 rounded text-sm ${canCancelBet(bet) ? 'bg-red-500 text-white' : 'bg-gray-300 text-gray-600'}`}
                                  disabled={loading || !canCancelBet(bet)}
                                >
                                  {canCancelBet(bet) ? "Cancel" : "Waiting"}
                                </button>
                              ) : (
                                <button
                                  onClick={() => handleJoinGame(bet.betId)}
                                  className="py-1 px-4 rounded bg-green-500 text-white text-sm"
                                  disabled={loading}
                                >
                                  Join
                                </button>
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}

            {/* My Games Tab */}
            {activeTab === "my-games" && (
              <div>
                <h3 className="text-xl font-bold mb-4">My Games</h3>
                
                {myGames.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <p>You haven't played any games yet.</p>
                    <p className="mt-2">Start by creating or joining a game!</p>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-white">
                      <thead>
                        <tr>
                          <th className="py-3 px-4 border-b text-left">Game ID</th>
                          <th className="py-3 px-4 border-b text-left">Opponent</th>
                          <th className="py-3 px-4 border-b text-left">Token</th>
                          <th className="py-3 px-4 border-b text-right">Amount</th>
                          <th className="py-3 px-4 border-b text-center">Status</th>
                          <th className="py-3 px-4 border-b text-center">Result</th>
                        </tr>
                      </thead>
                      <tbody>
                        {myGames.map((game) => {
                          const isPlayer1 = game.player1.toLowerCase() === address?.toLowerCase();
                          const opponent = isPlayer1 ? game.player2 : game.player1;
                          const playerChoice = isPlayer1 ? game.player1Face : !game.player1Face;
                          const isWinner = game.winner.toLowerCase() === address?.toLowerCase();
                          
                          return (
                            <tr key={game.requestId}>
                              <td className="py-3 px-4 border-b">{game.requestId.substring(0, 8)}...</td>
                              <td className="py-3 px-4 border-b">{formatAddress(opponent)}</td>
                              <td className="py-3 px-4 border-b">{getTokenSymbol(game.token)}</td>
                              <td className="py-3 px-4 border-b text-right">{formatEther(game.amount)}</td>
                              <td className="py-3 px-4 border-b text-center">
                                {game.fulfilled ? (
                                  <span className="px-2 py-1 rounded bg-green-100 text-green-800">Completed</span>
                                ) : (
                                  <span className="px-2 py-1 rounded bg-yellow-100 text-yellow-800">Pending</span>
                                )}
                              </td>
                              <td className="py-3 px-4 border-b text-center">
                                {game.fulfilled ? (
                                  isWinner ? (
                                    <span className="px-2 py-1 rounded bg-green-100 text-green-800">
                                      Won ({formatEther(game.amount)} {getTokenSymbol(game.token)})
                                    </span>
                                  ) : (
                                    <span className="px-2 py-1 rounded bg-red-100 text-red-800">
                                      Lost
                                    </span>
                                  )
                                ) : (
                                  <span className="text-gray-500">Waiting...</span>
                                )}
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Wallet Connection Modal */}
      <WalletModal
        isModalOpen={isModalOpen}
        connectors={connectors}
        selectedConnector={selectedConnector}
        handleConnectorSelect={handleConnectorSelect}
        handleConnect={handleConnect}
        handleCloseModal={handleCloseModal}
      />
    </div>
  );
};

export default Pvp;