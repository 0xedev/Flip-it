import React, { useState } from 'react';
import { ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';

export const client = new ApolloClient({
  uri: "https://api.studio.thegraph.com/query/104328/leader/version/latest",
  cache: new InMemoryCache(),
});

export const SUPPORTED_TOKENS = {
  STABLEAI: "0x07F41412697D14981e770b6E335051b1231A2bA8",
  DIG: "0x208561379990f106E6cD59dDc14dFB1F290016aF",
  WEB9: "0x09CA293757C6ce06df17B96fbcD9c5f767f4b2E1",
  BNKR: "0x22aF33FE49fD1Fa80c7149773dDe5890D3c76F3b",
  FED: "0x19975a01B71D4674325bd315E278710bc36D8e5f",
  RaTcHeT: "0x1d35741c51fb615ca70e28d3321f6f01e8d8a12d",
  GIRTH: "0xa97d71a5fdf906034d9d121ed389665427917ee4",
};

const GET_TOP_PLAYERS_QUERY = gql`
  query TopPayoutsPerToken($token: Bytes!) {
    payouts(
      where: { token: $token }
      orderBy: profit
      orderDirection: desc
    ) {
      id
      profit
      token
    }
    gameWons {
      id
      player
      payout
    }
  }
`;

interface GameWon {
  id: string;
  player: string;
  payout: string;
}

interface Payout {
  id: string;
  profit: string;
  token: string;
}

interface GetTopPlayersData {
  payouts: Payout[];
  gameWons: GameWon[];
}

interface GetTopPlayersVars {
  token: string;
}

function LeaderBoard() {
  const [selectedToken, setSelectedToken] = useState<string>(SUPPORTED_TOKENS.RaTcHeT);
  const [customAddress, setCustomAddress] = useState<string>("");

  const { loading, error, data } = useQuery<GetTopPlayersData, GetTopPlayersVars>(GET_TOP_PLAYERS_QUERY, {
    variables: { token: selectedToken },
  });

  if (loading) return <div className="text-center text-lg text-gray-500">Loading...</div>;
  if (error) return <div className="text-center text-lg text-red-500">Error: {error.message}</div>;
  if (!data) return <div className="text-center text-lg text-gray-500">No data returned from the subgraph.</div>;

  // Extract transactionHash from id (first 66 characters)
  const getTransactionHash = (id: string) => id.slice(0, 66);

  // Map GameWon by transactionHash
  const gameWonMap = new Map<string, GameWon>();
  data.gameWons.forEach((gameWon) => {
    gameWonMap.set(getTransactionHash(gameWon.id), gameWon);
  });

  // Aggregate by player
  const playerPayouts = new Map<string, { totalProfit: bigint; count: number }>();
  data.payouts.forEach((payout) => {
    const txHash = getTransactionHash(payout.id);
    const gameWon = gameWonMap.get(txHash);
    const player = gameWon ? gameWon.player : 'Unknown';
    const profit = BigInt(payout.profit);

    const existing = playerPayouts.get(player) || { totalProfit: BigInt(0), count: 0 };
    existing.totalProfit += profit;
    existing.count += 1;
    playerPayouts.set(player, existing);
  });

  // Rank players by total profit
  const rankedPlayers = Array.from(playerPayouts.entries())
    .map(([player, data]) => ({
      player,
      totalProfit: data.totalProfit,
      count: data.count,
    }))
    .sort((a, b) => (b.totalProfit > a.totalProfit ? 1 : -1))
    .slice(0, 10);

  // Convert wei to tokens (divide by 10^18)
  const toTokenUnits = (wei: bigint) => (Number(wei) / 1e18).toFixed(2);

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-lg">
      <h2 className="text-3xl font-semibold text-center text-blue-600 mb-8">Top 10 Players by Total Payout</h2>

      <div className="mb-6">
        <label htmlFor="token-select" className="block text-lg font-medium text-gray-700 mb-2">Select Token</label>
        <select
          id="token-select"
          value={selectedToken}
          onChange={(e) => setSelectedToken(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          {Object.entries(SUPPORTED_TOKENS).map(([tokenName, tokenAddress]) => (
            <option key={tokenName} value={tokenAddress}>
              {tokenName}
            </option>
          ))}
        </select>
      </div>

      <div className="mb-6">
        <label htmlFor="custom-address" className="block text-lg font-medium text-gray-700 mb-2">Enter Custom Token Address</label>
        <input
          type="text"
          id="custom-address"
          value={customAddress}
          onChange={(e) => setCustomAddress(e.target.value)}
          placeholder="Enter token address"
          className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <h3 className="text-xl font-semibold text-gray-800 mb-4">Token: {selectedToken}</h3>

      {rankedPlayers.length === 0 ? (
        <p className="text-center text-gray-600">No payouts found for this token.</p>
      ) : (
        <ul className="space-y-4">
          {rankedPlayers.map((entry, index) => (
            <li key={index} className="p-4 bg-gray-100 rounded-lg shadow hover:bg-gray-200 transition">
              <p className="font-semibold text-lg text-gray-800">Rank {index + 1} - Player: {entry.player}</p>
              <p className="text-gray-600">Total Profit: {toTokenUnits(entry.totalProfit)} tokens</p>
              <p className="text-gray-600">Number of Wins: {entry.count}</p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default LeaderBoard;
